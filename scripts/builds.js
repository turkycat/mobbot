// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = function(robot) {
    var BuildIdentity, BuildQuery, BuildStatus, branch_root_address, check_for_state_change, fetch_build_status, fetch_builds, jsdom, print_results, windowsbuild_branch_address, windowsbuild_root_address, windowsbuild_status_address;
    jsdom = require("jsdom");
    branch_root_address = "rs1_onecore_stacksp_mobcon_";
    windowsbuild_root_address = "http://windowsbuild/status/";
    windowsbuild_branch_address = "Builds.aspx?buildquery=" + branch_root_address;
    windowsbuild_status_address = "Timebuilds.aspx?buildguid=";
    BuildQuery = (function() {
      function BuildQuery(response, branch, count, callback) {
        this.response = response;
        this.branch = branch;
        this.count = count;
        this.callback = callback;
        this.build_identity_results;
      }

      return BuildQuery;

    })();
    BuildStatus = (function() {
      function BuildStatus(flavor, status, restarts) {
        this.flavor = flavor;
        this.status = status;
        this.restarts = restarts;
        this.pattern = {
          text: "",
          color: "#36a64f",
          fields: [
            {
              title: "Status",
              value: ""
            }, {
              title: "Restarts",
              value: ""
            }
          ]
        };
      }

      return BuildStatus;

    })();
    BuildIdentity = (function() {
      function BuildIdentity(buildid, date, guid, web_address) {
        if (web_address == null) {
          web_address = "";
        }
        this.buildid = buildid;
        this.date = date;
        this.guid = guid;
        this.web_address = web_address;
        this.status = [];
      }

      return BuildIdentity;

    })();
    fetch_builds = function(query) {
      var web_address;
      web_address = "" + windowsbuild_root_address + windowsbuild_branch_address + query.branch;
      return robot.http(web_address).get()(function(err, res, body) {
        var branch_pattern, k, num, pattern_matches, ref, results;
        if (err || res.statusCode !== 200) {
          query.response.send("DOES NOT COMPUTE :( (an error occurred with the http request)");
          return;
        }
        branch_pattern = RegExp("<td>(.+)\\." + branch_root_address + query.branch + "\\.(.+)buildguid=(.+)\">(.*)", "g");
        pattern_matches = body.match(branch_pattern);
        if (pattern_matches) {
          query.build_identity_results = [];
          num = query.count < pattern_matches.length ? query.count : pattern_matches.length;
          query.response.send(("Found " + pattern_matches.length + " results. Retrieving status of ") + (num > 1 ? num + " builds, starting with most recent." : "most recent build."));
          (function() {
            results = [];
            for (var k = 0, ref = num - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
            return results;
          }).apply(this).map(function(i) {
            var build, buildid, date, guid;
            if (pattern_matches[i]) {
              buildid = pattern_matches[i].match(/\d{5}\.\d{4}/);
              date = pattern_matches[i].match(/\d{6}\-\d{4}/);
              guid = pattern_matches[i].match(/.{8}\-.{4}\-.{4}\-.{4}\-.{12}/);
              build = new BuildIdentity(buildid, date, guid);
              return query.build_identity_results.push(build);
            }
          });
          query.response.send("Parsed " + query.build_identity_results.length + " results into build identities");
          return fetch_build_status(query);
        } else {
          return query.response.send("Unable to retrieve build listing.");
        }
      });
    };
    fetch_build_status = function(query) {
      var k, ref, results;
      return (function() {
        results = [];
        for (var k = 0, ref = query.build_identity_results.length - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
        return results;
      }).apply(this).map(function(i) {
        var web_address;
        web_address = "" + windowsbuild_root_address + windowsbuild_status_address + query.build_identity_results[i].guid;
        query.build_identity_results[i].web_address = web_address;
        return robot.http(web_address).get()(function(err, res, body) {
          var builds, k, ref, results;
          if (err || res.statusCode !== 200) {
            query.response.send("DOES NOT COMPUTE :( (an error occurred with the http request)");
            return;
          }
          builds = body.match(/<td>(x86fre|woafre|ARM64FRE|amd64fre)(.*)/gi);
          if (builds) {
            (function() {
              results = [];
              for (var k = 0, ref = builds.length - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
              return results;
            }).apply(this).map(function(j) {
              var build_status, k, ref, results, table_elements;
              if (builds[j]) {
                table_elements = builds[j].split(/\<td\>/g);
                (function() {
                  results = [];
                  for (var k = 1, ref = table_elements.length - 1; 1 <= ref ? k <= ref : k >= ref; 1 <= ref ? k++ : k--){ results.push(k); }
                  return results;
                }).apply(this).map(function(j) {
                  if (table_elements[j]) {
                    return table_elements[j] = table_elements[j].replace(/\<\/td\>/, "");
                  }
                });
                build_status = new BuildStatus(table_elements[1], table_elements[3], table_elements[5]);
                if (table_elements[3] === "Started") {
                  build_status.color = "#ffff66";
                }
                if (table_elements[3] === "Failed") {
                  build_status.color = "#ff3333";
                }
                return query.build_identity_results[i].status.push(build_status);
              }
            });
            return query.response.send("Parsed " + query.build_identity_results[i].status.length + " build statuses for " + i + "'th identity.");
          } else {
            return query.response.send("Unable to retrieve build status.");
          }
        });
      });
    };
    print_results = function(query) {
      var k, ref, results;
      return (function() {
        results = [];
        for (var k = 0, ref = query.build_identity_results.length - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
        return results;
      }).apply(this).map(function(i) {
        var message;
        message = i + ": *date*: " + query.build_identity_results[i].date + "  |  *buildid*: " + query.build_identity_results[i].buildid + "  |  *guid*: " + query.build_identity_results[i].guid + "\n";
        message += query.build_identity_results[i].web_address + "\n";
        query.build_identity_results[i].status.map(function(status) {
          return message += status.flavor + ": " + status.status + "   |   *Restarts*: " + status.restarts + "\n";
        });
        return query.response.send(message);
      });
    };
    check_for_state_change = function(query) {};
    return robot.hear(/^builds? ?(.{2}\d) ?(\d*){1}/i, function(response) {
      var branch, count;
      branch = response.match[1];
      count = res.match[2] ? response.match[2] : "1";
      response.send("Fetching builds for " + branch);
      return fetch_builds(new BuildQuery(response, branch, count, print_results));
    });
  };

}).call(this);
