// Generated by CoffeeScript 1.10.0
(function() {
  var CircularPrimeGenerator, PrimeSieve, generator, max,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PrimeSieve = (function() {
    function PrimeSieve(max1) {
      var d, j, k, len1, p, ref, ref1, results;
      this.max = max1;
      this.nums = (function() {
        results = [];
        for (var j = 2, ref = this.max; 2 <= ref ? j <= ref : j >= ref; 2 <= ref ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this);
      ref1 = this.nums;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        p = ref1[k];
        d = 2 * p;
        while (p !== 0 && d <= this.max) {
          this.nums[d - 2] = 0;
          d += p;
        }
      }
    }

    PrimeSieve.prototype.isPrime = function(n) {
      return this.nums[n - 2] !== 0;
    };

    PrimeSieve.prototype.thePrimes = function() {
      return this.nums.filter(function(n) {
        return n !== 0;
      });
    };

    return PrimeSieve;

  })();

  CircularPrimeGenerator = (function(superClass) {
    var genPerms;

    extend(CircularPrimeGenerator, superClass);

    function CircularPrimeGenerator() {
      return CircularPrimeGenerator.__super__.constructor.apply(this, arguments);
    }

    genPerms = function(num) {
      var i, s, x;
      s = new String(num);
      x = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = s.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          results.push(s.slice(i + 1, s.length).concat(s.slice(0, +i + 1 || 9e9)));
        }
        return results;
      })();
      return x.map(function(a) {
        return parseInt(a);
      });
    };

    CircularPrimeGenerator.prototype.isCircularPrime = function(n) {
      var len, perms, primePerms;
      perms = genPerms(n);
      len = perms.length;
      primePerms = perms.filter((function(_this) {
        return function(p) {
          return _this.isPrime(p);
        };
      })(this));
      return len === primePerms.length;
    };

    CircularPrimeGenerator.prototype.theCircularPrimes = function() {
      var j, len1, p, ref, results;
      ref = this.thePrimes();
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        p = ref[j];
        if (this.isCircularPrime(p)) {
          results.push(p);
        }
      }
      return results;
    };

    return CircularPrimeGenerator;

  })(PrimeSieve);

  max = process.argv[2];

  generator = new CircularPrimeGenerator(max);

  console.log("Number of circular primes less than " + max + " is " + (generator.theCircularPrimes().length));

}).call(this);
